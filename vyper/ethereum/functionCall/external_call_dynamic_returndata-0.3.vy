interface Self:
    def d(n: uint256) -> Bytes[100]: pure
    
@external
@pure
def d(n: uint256) -> Bytes[100]:
    data: Bytes[100] = slice(b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63", 0, n)
    return data

@external
@view
def dt(n: uint256) -> uint256:
    data: Bytes[100] = Self(self).d(n)
    sum: uint256 = 0
    for i in range(100):
        if not i < len(data):
            break
        sum += convert(convert(slice(data, i, 1), uint8), uint256)
    return sum

# ====
# EVMVersion: >=byzantium
# compileViaYul: also
# ----
# dt(uint256): 4 -> 6
